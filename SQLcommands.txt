Show databases;
CREATE DATABASE webDev;
USE webDev;
DROP DATABASE webDev;
Show tables;
DROP TABLE webDev;

CREATE TABLE webDev (id INTEGER, Module Name TEXT);

Insert syntax
INSERT INTO mytable
(column, another_column, …)
VALUES (value_or_expr, another_value_or_expr, …),
      (value_or_expr_2, another_value_or_expr_2, …),
      …;


INSERT INTO webDev (id, Module_Name) VALUES (1, 'HTML');

SELECT * FROM webDev;

SELECT Module_Name FROM webDev;

ALTER TABLE webDev ADD COLUMN Remarks TEXT;

UPDATE syntax
UPDATE mytable
SET column = value_or_expr, 
    other_column = another_value_or_expr, 
    …
WHERE condition;



UPDATE webDev SET id = 2 WHERE Module_Name = 'CSS';

BEFORE:

+------+-------------+---------+
| id   | Module_Name | Remarks |
+------+-------------+---------+
|    1 | HTML        | NULL    |
|    1 | CSS         | NULL    |
|    3 | Javascript  | NULL    |
+------+-------------+---------+

After: 
+------+-------------+---------+
| id   | Module_Name | Remarks |
+------+-------------+---------+
|    1 | HTML        | NULL    |
|    2 | CSS         | NULL    |
|    3 | Javascript  | NULL    |
+------+-------------+---------+

DELETE FROM webDev WHERE id = 5;
DELETE FROM webDev WHERE Remarks IS NULL;
SELECT Module_Name AS title FROM webDev;
SELECT DISTINCT Module_Name AS title FROM webDev;
SELECT * FROM webDev WHERE id > 2;
SELECT * FROM webDev WHERE Module_Name LIKE 'H_M_';
SELECT * FROM webDev WHERE Module_Name LIKE 'H%';
SELECT * FROM webDev WHERE Duration IS NULL;
SELECT * FROM webDev WHERE Duration IS NOT NULL;
SELECT * FROM webDev WHERE id BETWEEN 2 AND 3;
SELECT * FROM webDev ORDER BY Module_Name DESC;
SELECT * FROM webDev LIMIT 8;
SELECT * FROM webDev ORDER BY Module_Name ASC LIMIT 4;

SELECT name, CASE WHEN imdb_rating > 8 THEN 'Fantastic' WHEN imdb_rating > 6 THEN 'Poorly Received' ELSE 'Avoid at All Costs' END AS 'Review' FROM movies;
SELECT name, CASE WHEN genre = 'romance' THEN 'Chill' WHEN genre = 'comedy' THEN 'Chill' ELSE 'Intense' END AS 'Situation' FROM movies;


SHOW COLUMNS FROM db.table;


To define a Primary Key you can use the following syntax:

CREATE TABLE teachers (
      teacher_number INT NOT NULL AUTO_INCREMENT,
      name VARCHAR(50),
      date_of_birth DATE,
      subject TEXT,
      email VARCHAR(200),
      PRIMARY KEY (teacher_number)
);
If you already have the table, and you just want to change a column to Primary Key:

ALTER TABLE teachers ADD PRIMARY KEY (teacher_number);


To define a Foreign Key while creating the table, you can use the following syntax:

CREATE TABLE students (
    student_number INT NOT NULL AUTO_INCREMENT,
    name VARCHAR(50),
    teacher_id INT,
    email VARCHAR(200),
    PRIMARY KEY (student_number),
    FOREIGN KEY (teacher_id) REFERENCES teachers(teacher_number)
);
A foreign key does two useful things;

It will guarantee referential integrity: When a row in a table refers to a corresponding row in another table, then that corresponding row will exist.
It will create an index on this column, giving faster results when querying on this particular column.
or you can add a foreign key later:

ALTER TABLE students
    ADD CONSTRAINT FK_TEACHER FOREIGN KEY (teacher_id) REFERENCES teachers(teacher_number);

UNIQUE KEY

ALTER TABLE teachers ADD UNIQUE KEY (email);

Composite Key
A composite key is a key composed of two or more columns in a table that can be used to uniquely identify each row in the table when the columns are combined uniqueness is guaranteed, but when taken individually it does not guarantee uniqueness.

For example, in a database with students from several schools you'd expect the same student_number across schools.

CREATE TABLE students_across_schools (
    student_number INT NOT NULL AUTO_INCREMENT,
    name VARCHAR(50),
    school_id INT,
    PRIMARY KEY (student_number, school_id)
);


Syntax to select author's id, name and mentor's name from the same table where author's id is the PK and mentor is the FK associated with the PK (author's id)
SELECT authors.author_id ,authors.author_name, Mentor.author_name AS Mentors FROM authors left JOIN authors Mentor ON authors.Mentor = Mentor.author_id;

Syntax to create and store result of a query in a table. 
CREATE TABLE Authors_and_Papers SELECT authors.*, research_papers.paper_title FROM Authors LEFT JOIN research_papers ON authors.author_id = research_papers.Author_id;
